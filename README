ActionScript 3 Social Network API - универсальная прослойка для работы с API различных соцсетей из Flash-приложений. 
Библиотека as3snapi основана на опыте работы с API популяных соцсетей наработанном в Igrostar (http://igrostar.com)
Основные идеи заложенные в as3snapi:
* можно использвать общий swf файл приложения для всех соцсетей;
* приложение без изменений можно использовать и в собственном iframe и заливая на сервера соцсетей (my.mail.ru vk.com)
* доступная соцсеть определяется автоматически на основе flashvars;
* подключение новых сетей не должно требовать серьезных изменений кода приложения;
* в приложение включается код только для используемых сетей;
* максимальное повторное использование кода внутри библиотеки;
* большинство сетей предоставлюят схожий API, для них библиотека предоставляет общий интерфейс;
* в экзотических соцсетях любая привычная функция может отсутствовать (нет окна приглашения друзей, нет функции загрузки всех друзей, нет функции загрузки профиля по id и т.д.), код приложения должен быть готов к этому и иметь возможность проверить доступность функционала.

Особенности:
* Доступ к возможностям соцсетей осуществялется через механизм 'фич' (обычный ActionScript interface) подключаемых к общей 'шине' (примитивный IoC-контейнер);
* Имеется набор базовых 'фич', которые поддерживаются большинством сетей (получить профиль, список друзей, пригласить друзей, и т.д.);
* Для доступа к специфичным возможностям модуль соцсети вводит свои собственные дополнительные 'фичи'; 
* Модули сетей реализованы в виде отдельных плагинов. 

Текущая реализация поддерживает: 
* http://vk.com - Вконтакте;
* http://my.mail.ru - Мой мир;
* http://odnoklassniki.ru -Одноклассники ;
* mock - тестовая offline сеть на основе конфиг-файла. Имеется возможность сделать сделать сномок данных с любой из вышеперечисленных сетей и использовать их оффлайн для отладки через mock сеть.
В ближайших планах расширение этого списка.

На данный момент сети поддерживают только базовые функции: 
* получение друзей; 
* получение друзей в приложении; 
* получение своего профиля; 
* отображение окна приглашения друзей. 
На данный момент из документации имеется только код приложения sandbox (в репозитории) :)

Собраную песочницу можно скачать отсюда:
https://bitbucket.org/nitrobin/as3snapi/downloads
http://cdn.bitbucket.org/nitrobin/as3snapi/downloads/as3snapi-sandbox-1.0.4-SNAPSHOT.swf
Без параметров приложение запуститься в режиме mock;

Библиотека находится в стадии активной разработки и API может быть изменен.

Пример использования (инициализация API и загрузка своего профиля):

// as3snapi-sandbox/src/HelloWorld.as
public class HelloWorld extends Sprite {
    private var tf:TextField = new TextField();

    public function HelloWorld() {
        tf.width = 400;
        tf.height = 400;
        tf.wordWrap = true;
        addChild(tf);

        // Подключение и настройка требуемых соцсетей
        var factory:IConnectionFactory = new ConnectionFactory(
                stage.loaderInfo.parameters, // Передача FlashVars
                new <INetworkConfig>[ // Настройки соцсетей
                    new ConfigVkcom(),
                    new ConfigMock().setData(MOCK_DATA), // Указываем снимок данных
                ],
                new <INetworkModule>[ // Подключение модулей соцсетей
                    new ModuleVkcom(),
                    new ModuleMock(),
                ],
                new <IBusModule>[ // Подключение дополнительных модуле
                    new BusModuleLogTrace() // Включаем выдачу внутренних логов через trace
                ]
        );

        // Подключаемся к API
        factory.createConnection(new NetworkConnectHandler(onSuccess, onFail));

        function onFail(result:Object):void {
            tf.text = "FAIL";// Неудача
        }

        function onSuccess(connection:INetworkConnection):void {
            tf.text = "READY";// API готово
            // Получаем фичу для загрузки своего профиля
            var feature:IFeatureSelfProfile = connection.getFeature(IFeatureSelfProfile)
            if (feature != null) {
                // фича доступна, загружаем профиль
                feature.getSelfProfile(
                        new OneProfileHandler(function (profile:IProfile):void {
                            // Обрабатываем полученный профиль
                            tf.text = "Hello, " + profile.getFullName() + "!\n" +
                                    "Your profile: " + JsonUtils.encode(profile);
                        }, function (result:Object):void {
                            // Ошибка при получении профиля
                            tf.text = "FAIL: " + JsonUtils.encode(result);
                        }));
            } else {
                // фича недоступна.. :(
                tf.text = "IFeatureSelfProfile - UNSUPPORTED";
            }
        }
    }

    // Фиксированные данные для выдачи через Mock API
    private static const MOCK_DATA:Object = {
        shortNetworkId:"mock",
        userId:1,
        inviterId:2,
        appId:123,
        profiles:{1:{fullName:"Jimmy"}, 2:{fullName:"Pavel"}, 3:{fullName:"Mark"}},
        appFriendsUids:[2],
        friendsUids:[2, 3]
    };
}